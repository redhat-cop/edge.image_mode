---
- name: create | Define variable for container base directory
  # we use expanduser to expand tilde as the normal user, not root later on
  ansible.builtin.set_fact:
    __imode_build_base_dir: "{{ imode_build_directory | expanduser }}/{{ __imode_build_item.name }}"
- name: create | Make sure base directory does exist
  ansible.builtin.file:
    path: "{{ __imode_build_base_dir }}"
    state: directory
    mode: "{{ imode_build_dir_mode }}"
- name: create | Define variable for container file
  ansible.builtin.set_fact:
    __imode_build_file: "{{ __imode_build_base_dir }}/Containerfile.{{ __imode_build_item.tags[0] }}"
- name: create | Create versioned Containerfile from template
  ansible.builtin.template:
    src: "{{ __imode_build_item.template }}"
    dest: "{{ __imode_build_file }}"
    mode: "{{ imode_build_file_mode }}"
  register: __imode_build_containerfile
  vars:
    imode_tmpl_base_image: "{{ __imode_build_item.base_image }}"
    imode_tmpl_vars: "{{ __imode_build_item.dict_vars | default({}) }}"
    # IMPORTANT: further variables might be needed by the template!

- name: create | Copy local files remotely if required
  ansible.builtin.copy:
    src: "{{ __imode_build_item['copy_dir'] }}"
    dest: "{{ __imode_build_base_dir }}"
    mode: "{{ imode_build_file_mode }}"
    directory_mode: "{{ imode_build_dir_mode }}"
  when:
    - __imode_build_item['copy_dir'] is defined
  register: __imode_build_copy_dir

- name: create | Login to necessary registries
  containers.podman.podman_login:
    username: "{{ imode_build_registry_auths[item]['username'] | default(omit) }}"
    password: "{{ imode_build_registry_auths[item]['password'] | default(omit) }}"
    secret: "{{ imode_build_registry_auths[item]['secret'] | default(omit) }}"
    tlsverify: "{{ imode_build_registry_auths[item]['tlsverify'] | default(omit) }}"
    registry: "{{ item }}"
  # Making sure we login only once for each registry involved
  loop: "{{ [(__imode_build_item.base_image | split('/'))[0], (__imode_build_item.target_image | split('/'))[0]] | unique }}"
  when:
    - imode_build_registry_auths[item] is defined
    - imode_build_registry_auths[item]  # is not empty
  changed_when: false  # we don't care

- name: create | Build the container image
  containers.podman.podman_image:
    name: "{{ __imode_build_item.target_image }}:{{ __imode_build_item.tags[0] }}"
    state: build
    build:
      file: "{{ __imode_build_file }}"
      extra_args: "{{ __imode_build_item.podman_build | default('') }}"
    path: "{{ __imode_build_base_dir }}"
    push: false
    force: true  # because we check ourselves if something changed
  when:
    - __imode_build_containerfile is changed or __imode_build_copy_dir is changed or imode_build_containers_force

- name: create | Tag the created container image with all tags
  containers.podman.podman_tag:
    image: "{{ __imode_build_item.target_image }}:{{ __imode_build_item.tags[0] }}"
    target_names: "{{ [__imode_build_item.target_image] | product(__imode_build_item.tags) | map('join', ':') | list }}"

- name: create | Push the container image(s)
  containers.podman.podman_image:
    name: "{{ __imode_build_item.target_image }}:{{ item }}"
    pull: false
    push: true
    force: "{{ imode_build_containers_force }}"
  loop: "{{ __imode_build_item.tags }}"
  when:
    - imode_build_registry_push
    - imode_build_registry_auths[(__imode_build_item.target_image | split('/'))[0]] is defined

- name: create | Logout from necessary registries (for security reasons)
  containers.podman.podman_logout:
    registry: "{{ item }}"
  # Making sure we logout only once for each registry involved
  loop: "{{ [(__imode_build_item.base_image | split('/'))[0], (__imode_build_item.target_image | split('/'))[0]] | unique }}"
  when:
    - imode_build_registry_logout
    - imode_build_registry_auths[item] is defined
    - imode_build_registry_auths[item]  # is not empty
  changed_when: false  # we don't care
